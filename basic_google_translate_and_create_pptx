
import os
import pptx.util
from pptx import Presentation
from pptx.util import Pt
import requests
from deep_translator import GoogleTranslator

""" Text translation using GoogleTranslate API!!! """
# You may face import (module not found) errors. Follow this post to fix this in your environment
# https://github.com/Saravananslb/py-googletranslation/issues/26

# global variables to drive the script
API_BASE_URL = "https://abcd2.projectabcd.com/api/getinfo.php?id="
output_file = 'project_abcd.pptx'

# Specify the destination Laguage
#dest_language = 'hi' #Hindi
dest_language = 'te' #Telugu

# Build the translator
translator = GoogleTranslator(source= 'auto',target=dest_language)

# Specify the preferences for PPTX generation
textFont = titleFont = "NATS"
titleSize, textSize  = 18, 12

# specify the IDs
all_ids =  [743,711,476,523,677,701, 710, 711, 712, 713, 714, 715]


'''
Fetch the data from API. This method returns the dictionary of the data for each dress.
'''
def fetch_data_from_api(ids):
    data_list = []
    for id in ids:
        url = API_BASE_URL + str(id)
        headers = {
            "Accept": "application/json",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36"
        }

        response = requests.get(url, headers=headers)

        if response.status_code == 200:
            data_list.append(response.json()['data'])
        else:
            print(f"Failed to get data from the API for ID {id}. Status code:", response.status_code)

    return data_list

# Call the fetch_data_from_api to populate the data_list
data_list = fetch_data_from_api(all_ids)
print("Here is the sample data for the first dress in the list:", data_list[1])


# Helper method to build the power point presentation
def buildPresentation():
    prs = Presentation()
    presentationLength = len(data_list)

    # web scrapes the URL to get all needed information from the page
    for i in range(0, presentationLength):
        print(i+1, '. ', end = ' ')
        printDescription = data_list[i]["description"]
        printFact = data_list[i]["did_you_know"]
        printName = data_list[i]["name"]

        # We now got printDescription and printFact
        printDescription = translator.translate(printDescription)
        printFact = translator.translate(printFact)

        # creates the slide presentation
        slide_layout = prs.slide_layouts[6]
        slide = prs.slides.add_slide(slide_layout)
        prs.slide_width = pptx.util.Inches(8)
        prs.slide_height = pptx.util.Inches(11)

        # places the title on the slide
        titleBox = slide.shapes.add_textbox(pptx.util.Inches(2.5), pptx.util.Inches(.5),
                                            width=pptx.util.Inches(3), height=pptx.util.Inches(1))
        titleBoxtf = titleBox.text_frame
        title = titleBoxtf.add_paragraph()
        title.text = printName
        title.font.name = titleFont
        title.font.size = Pt(titleSize)

        # creates a textbox for the description and fun fact
        contentBox = slide.shapes.add_textbox(pptx.util.Inches(1), pptx.util.Inches(6),
                                              width=pptx.util.Inches(6), height=pptx.util.Inches(5))
        contentBoxtf = contentBox.text_frame
        contentBoxtf.word_wrap = True

        descriptionTitle = contentBoxtf.add_paragraph()
        descriptionTitle.font.name = textFont
        descriptionTitle.font.bold = True
        descriptionTitle.font.size = Pt(textSize)
        descriptionTitle.text = "Description: "

        descriptionParagraph = contentBoxtf.add_paragraph()
        descriptionParagraph.font.name = textFont
        descriptionParagraph.font.size = Pt(textSize)
        descriptionParagraph.text = printDescription

        FunFactTitle = contentBoxtf.add_paragraph()
        FunFactTitle.font.name = textFont
        FunFactTitle.font.bold = True
        FunFactTitle.font.size = Pt(textSize)
        FunFactTitle.text = "\nDid you know?"

        FunFactParagraph = contentBoxtf.add_paragraph()
        FunFactParagraph.font.name = textFont
        FunFactParagraph.font.size = Pt(textSize)
        FunFactParagraph.text = printFact

    prs.save(output_file)
    return output_file


# Call the function to build the pptx
ppt_file = buildPresentation()

#Launch (start) the pptx file
os.startfile(ppt_file)
